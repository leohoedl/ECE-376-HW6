

HI-TECH Software PRO Macro Assembler (PIC18) V9.63PL3 build 4692 
                                                       Thu Feb 27 14:27:51 2020

HI-TECH Software Omniscient Code Generator build 4692
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 80
     4                           	opt	pm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	text1,global,reloc=2,class=CODE,delta=1
     7                           	psect	text2,global,reloc=2,class=CODE,delta=1
     8                           	psect	text3,global,reloc=2,class=CODE,delta=1
     9                           	psect	text4,global,reloc=2,class=CODE,delta=1
    10                           	psect	text5,global,reloc=2,class=CODE,delta=1
    11                           	psect	text6,global,reloc=2,class=CODE,delta=1
    12                           	psect	text7,global,reloc=2,class=CODE,delta=1
    13                           	psect	text8,global,reloc=2,class=CODE,delta=1
    14                           	psect	text9,global,reloc=2,class=CODE,delta=1
    15                           	psect	text10,global,reloc=2,class=CODE,delta=1
    16                           	psect	text11,global,reloc=2,class=CODE,delta=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONS
      +                          T,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=
      +                          1
    20                           	psect	pa_nodes,global,reloc=2,class=CODE,delta=
      +                          1
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98  000000                     
    99  000000                     
   100  000000                     
   101  000000                     
   102  000000                     
   103  000000                     
   104  000000                     
   105  000000                     
   106  000000                     
   107  000000                     
   108  000000                     
   109  000000                     
   110  000000                     
   111  000000                     
   112  000000                     
   113  000000                     
   114  000000                     
   115  000000                     
   116  000000                     
   117  000000                     
   118  000000                     
   119  000000                     
   120  000000                     
   121  000000                     
   122  000000                     
   123  000000                     
   124  000000                     
   125  000000                     
   126  000000                     
   127  000000                     
   128  000000                     
   129  000000                     
   130  000000                     
   131  000000                     
   132  000000                     
   133  000000                     
   134  000000                     
   135  000000                     
   136  000000                     
   137  000000                     
   138                           
   139                           	psect	text0
   140                           ;Data sizes: Strings 0, constant 21, data 0, bss
      +                           0, persistent 0 stack 40
   141  000000                     
   142                           ;Ohm_Meter.c: 31: void main(void)
   143                           ;Ohm_Meter.c: 32: {
   144  001018                     _main:
   145                           	opt stack 31
   146                           ; BSR set to: ?
   147                           ;Ohm_Meter.c: 33: int A2D;
   148                           ;Ohm_Meter.c: 34: int VOLT;
   149                           ;Ohm_Meter.c: 35: int OHM;
   150                           ;Ohm_Meter.c: 36: int CELSIUS;
   151                           ;Ohm_Meter.c: 37: int LUMENS;
   152                           ;Ohm_Meter.c: 39: unsigned int i, j, DIE;
   153                           ;Ohm_Meter.c: 41: TRISA = 0;
   154  001018  6A92               	clrf	3986,c	;volatile
   155                           ;Ohm_Meter.c: 42: TRISB = 0x0F;
   156  00101A  0E0F               	movlw	15
   157  00101C  6E93               	movwf	3987,c	;volatile
   158                           ;Ohm_Meter.c: 43: TRISC = 0x0F;
   159  00101E  6E94               	movwf	3988,c	;volatile
   160                           ;Ohm_Meter.c: 44: TRISD = 0;
   161  001020  6A95               	clrf	3989,c	;volatile
   162                           ;Ohm_Meter.c: 45: TRISE = 0;
   163  001022  6A96               	clrf	3990,c	;volatile
   164                           ;Ohm_Meter.c: 46: ADCON1 = 0x0F;
   165  001024  0E0F               	movlw	15
   166  001026  6EC1               	movwf	4033,c
   167                           ;Ohm_Meter.c: 48: LCD_Init();
   168  001028  ECD0  F009         	call	_LCD_Init	;wreg free
   169                           ;Ohm_Meter.c: 50: LCD_Move(0,0); for (i=0; i<20;
      +                           i++) LCD_Write(MSG0[i]);
   170  00102C  0E00               	movlw	0
   171  00102E  6A0B               	clrf	?_LCD_Move,c
   172  001030  ECB3  F009         	call	_LCD_Move
   173  001034  6A08               	clrf	??_main+8,c
   174  001036  6A09               	clrf	??_main+9,c
   175  001038                     l148:
   176                           ; BSR set to: ?
   177  001038  5008               	movf	??_main+8,w,c
   178  00103A  0F01               	addlw	low _MSG0
   179  00103C  6E0A               	movwf	(??_main+10)& (0+255),c
   180  00103E  C00A  FFF6         	movff	??_main+10,tblptrl
   181  001042  0E10               	movlw	high __Lsmallconst
   182  001044  6EF7               	movwf	tblptrh,c
   183  001046  0E00               	movlw	low (__Lsmallconst shr (0+16))
   184  001048  6EF8               	movwf	tblptru,c
   185  00104A  0008               	tblrd		*
   186  00104C  50F5               	movf	tablat,w,c
   187  00104E  EC2B  F00A         	call	_LCD_Write
   188  001052  4A08               	infsnz	??_main+8,f,c
   189  001054  2A09               	incf	??_main+9,f,c
   190  001056  0E14               	movlw	20
   191  001058  5C08               	subwf	??_main+8,w,c
   192  00105A  0E00               	movlw	0
   193  00105C  5809               	subwfb	??_main+9,w,c
   194  00105E  E3EC               	bnc	l148
   195                           ; BSR set to: ?
   196                           ;Ohm_Meter.c: 51: Wait_ms(500);
   197  001060  0EF4               	movlw	244
   198  001062  6E0D               	movwf	?_Wait_ms,c
   199  001064  0E01               	movlw	1
   200  001066  6E0E               	movwf	?_Wait_ms+1,c
   201  001068  EC17  F00A         	call	_Wait_ms	;wreg free
   202                           ;Ohm_Meter.c: 53: LCD_Inst(0x01);
   203  00106C  0E01               	movlw	1
   204  00106E  ECEA  F009         	call	_LCD_Inst
   205                           ;Ohm_Meter.c: 56: TRISA = 0xFF;
   206  001072  6892               	setf	3986,c	;volatile
   207                           ;Ohm_Meter.c: 57: TRISE = 0x0F;
   208  001074  0E0F               	movlw	15
   209  001076  6E96               	movwf	3990,c	;volatile
   210                           ;Ohm_Meter.c: 58: ADCON2 = 0x85;
   211  001078  0E85               	movlw	133
   212  00107A  6EC0               	movwf	4032,c
   213                           ;Ohm_Meter.c: 59: ADCON1 = 0x07;
   214  00107C  0E07               	movlw	7
   215  00107E  6EC1               	movwf	4033,c
   216                           ;Ohm_Meter.c: 60: ADCON0 = 0x01;
   217  001080  0E01               	movlw	1
   218  001082  6EC2               	movwf	4034,c	;volatile
   219                           ;Ohm_Meter.c: 61: i = 0;
   220  001084  6AF3               	clrf	prodl,c
   221  001086  6AF4               	clrf	prodh,c
   222                           ;Ohm_Meter.c: 63: while(1) {
   223  001088                     l152:
   224                           ; BSR set to: ?
   225                           ;Ohm_Meter.c: 65: A2D = A2D_Read(0);
   226  001088  0E00               	movlw	0
   227  00108A  EC02  F00A         	call	_A2D_Read
   228  00108E  C00B  F006         	movff	?_A2D_Read,??_main+6
   229  001092  C00C  F007         	movff	?_A2D_Read+1,??_main+7
   230                           ;Ohm_Meter.c: 67: VOLT = A2D ;
   231  001096  C006  F004         	movff	??_main+6,??_main+4
   232  00109A  C007  F005         	movff	??_main+7,??_main+5
   233                           ;Ohm_Meter.c: 68: OHM = A2D;
   234  00109E  C006  F002         	movff	??_main+6,??_main+2
   235  0010A2  C007  F003         	movff	??_main+7,??_main+3
   236                           ;Ohm_Meter.c: 69: CELSIUS = A2D;
   237  0010A6  C006  F000         	movff	??_main+6,??_main
   238  0010AA  C007  F001         	movff	??_main+7,??_main+1
   239                           ;Ohm_Meter.c: 70: LUMENS = A2D;
   240  0010AE  0E00               	movlw	0
   241  0010B0  6A0B               	clrf	?_LCD_Move,c
   242  0010B2  ECB3  F009         	call	_LCD_Move
   243  0010B6  6A10               	clrf	?_LCD_Out+5,c
   244  0010B8  0E05               	movlw	5
   245  0010BA  6E0F               	movwf	?_LCD_Out+4,c
   246  0010BC  C006  F00B         	movff	??_main+6,?_LCD_Out
   247  0010C0  C007  F00C         	movff	??_main+7,?_LCD_Out+1
   248  0010C4  0E00               	movlw	0
   249  0010C6  BE0C               	btfsc	?_LCD_Out+1,7,c
   250  0010C8  0EFF               	movlw	-1
   251  0010CA  6E0D               	movwf	?_LCD_Out+2,c
   252  0010CC  6E0E               	movwf	?_LCD_Out+3,c
   253  0010CE  ECA8  F008         	call	_LCD_Out	;wreg free
   254                           ;Ohm_Meter.c: 73: LCD_Move(0,8); LCD_Out(VOLT, 5
      +                          , 0);
   255  0010D2  0E08               	movlw	8
   256  0010D4  6E0B               	movwf	?_LCD_Move,c
   257  0010D6  0E00               	movlw	0
   258  0010D8  ECB3  F009         	call	_LCD_Move
   259  0010DC  6A10               	clrf	?_LCD_Out+5,c
   260  0010DE  0E05               	movlw	5
   261  0010E0  6E0F               	movwf	?_LCD_Out+4,c
   262  0010E2  C004  F00B         	movff	??_main+4,?_LCD_Out
   263  0010E6  C005  F00C         	movff	??_main+5,?_LCD_Out+1
   264  0010EA  0E00               	movlw	0
   265  0010EC  BE0C               	btfsc	?_LCD_Out+1,7,c
   266  0010EE  0EFF               	movlw	-1
   267  0010F0  6E0D               	movwf	?_LCD_Out+2,c
   268  0010F2  6E0E               	movwf	?_LCD_Out+3,c
   269  0010F4  ECA8  F008         	call	_LCD_Out	;wreg free
   270                           ;Ohm_Meter.c: 74: LCD_Move(1,0); LCD_Out(OHM, 5,
      +                           0);
   271  0010F8  6A0B               	clrf	?_LCD_Move,c
   272  0010FA  0E01               	movlw	1
   273  0010FC  ECB3  F009         	call	_LCD_Move
   274  001100  6A10               	clrf	?_LCD_Out+5,c
   275  001102  0E05               	movlw	5
   276  001104  6E0F               	movwf	?_LCD_Out+4,c
   277  001106  C002  F00B         	movff	??_main+2,?_LCD_Out
   278  00110A  C003  F00C         	movff	??_main+3,?_LCD_Out+1
   279  00110E  0E00               	movlw	0
   280  001110  BE0C               	btfsc	?_LCD_Out+1,7,c
   281  001112  0EFF               	movlw	-1
   282  001114  6E0D               	movwf	?_LCD_Out+2,c
   283  001116  6E0E               	movwf	?_LCD_Out+3,c
   284  001118  ECA8  F008         	call	_LCD_Out	;wreg free
   285                           ;Ohm_Meter.c: 75: LCD_Move(1,8); LCD_Out(CELSIUS
      +                          , 5, 0);
   286  00111C  0E08               	movlw	8
   287  00111E  6E0B               	movwf	?_LCD_Move,c
   288  001120  0E01               	movlw	1
   289  001122  ECB3  F009         	call	_LCD_Move
   290  001126  6A10               	clrf	?_LCD_Out+5,c
   291  001128  0E05               	movlw	5
   292  00112A  6E0F               	movwf	?_LCD_Out+4,c
   293  00112C  C000  F00B         	movff	??_main,?_LCD_Out
   294  001130  C001  F00C         	movff	??_main+1,?_LCD_Out+1
   295  001134  0E00               	movlw	0
   296  001136  BE0C               	btfsc	?_LCD_Out+1,7,c
   297  001138  0EFF               	movlw	-1
   298  00113A  6E0D               	movwf	?_LCD_Out+2,c
   299  00113C  6E0E               	movwf	?_LCD_Out+3,c
   300  00113E  ECA8  F008         	call	_LCD_Out	;wreg free
   301                           ;Ohm_Meter.c: 77: Wait_ms(100);
   302  001142  0E64               	movlw	100
   303  001144  6E0D               	movwf	?_Wait_ms,c
   304  001146  0E00               	movlw	0
   305  001148  6A0E               	clrf	?_Wait_ms+1,c
   306  00114A  EC17  F00A         	call	_Wait_ms	;wreg free
   307                           ; BSR set to: ?
   308  00114E  D79C               	goto	l152
   309  001150                     __end_of_main:
   310                           	opt stack 0
   311                           
   312                           	psect	text1
   313                           ; =============== function _main ends ==========
      +                          ==
   314  000000                     
   315                           ;lcd_portd.c: 53: void LCD_Move(unsigned char Ro
      +                          w, unsigned char Col)
   316                           ;lcd_portd.c: 54: {
   317  001366                     _LCD_Move:
   318                           	opt stack 30
   319                           ; BSR set to: ?
   320                           ; LCD_Move@Row loaded to fsr2l
   321  001366  CFE8 FFD9          	movff	wreg,fsr2l
   322                           ;lcd_portd.c: 55: if (Row == 0) LCD_Inst(0x80 + 
      +                          Col);
   323  00136A  66D9               	tstfsz	fsr2l,c
   324  00136C  D004               	goto	l124
   325  00136E  500B               	movf	?_LCD_Move,w,c
   326  001370  0F80               	addlw	128
   327  001372  ECEA  F009         	call	_LCD_Inst
   328  001376                     l124:
   329                           ; BSR set to: ?
   330                           ;lcd_portd.c: 56: if (Row == 1) LCD_Inst(0xC0 + 
      +                          Col);
   331  001376  04D9               	decf	fsr2l,w,c
   332  001378  E104               	bnz	l125
   333  00137A  500B               	movf	?_LCD_Move,w,c
   334  00137C  0FC0               	addlw	192
   335  00137E  ECEA  F009         	call	_LCD_Inst
   336  001382                     l125:
   337                           ; BSR set to: ?
   338                           ;lcd_portd.c: 57: if (Row == 2) LCD_Inst(0x94 + 
      +                          Col);
   339  001382  50D9               	movf	fsr2l,w,c
   340  001384  0A02               	xorlw	2
   341  001386  E104               	bnz	l126
   342  001388  500B               	movf	?_LCD_Move,w,c
   343  00138A  0F94               	addlw	148
   344  00138C  ECEA  F009         	call	_LCD_Inst
   345  001390                     l126:
   346                           ; BSR set to: ?
   347                           ;lcd_portd.c: 58: if (Row == 3) LCD_Inst(0xD4 + 
      +                          Col);
   348  001390  50D9               	movf	fsr2l,w,c
   349  001392  0A03               	xorlw	3
   350  001394  A4D8               	btfss	status,2,c
   351  001396  0012               	return	
   352  001398  500B               	movf	?_LCD_Move,w,c
   353  00139A  0FD4               	addlw	212
   354  00139C  EFEA  F009         	goto	_LCD_Inst
   355                           ; BSR set to: ?
   356                           ;lcd_portd.c: 59: }
   357                           ; BSR set to: ?
   358  0013A0                     __end_of_LCD_Move:
   359                           	opt stack 0
   360                           
   361                           	psect	text2
   362                           ; =============== function _LCD_Move ends ======
      +                          ======
   363  000000                     
   364                           ;lcd_portd.c: 86: void LCD_Out(long int DATA, un
      +                          signed char D, unsigned char N)
   365                           ;lcd_portd.c: 87: {
   366  001150                     _LCD_Out:
   367                           	opt stack 30
   368                           ; BSR set to: ?
   369                           ;lcd_portd.c: 88: unsigned char A[10], i;
   370                           ;lcd_portd.c: 90: if(DATA < 0) {
   371  001150  AE0E               	btfss	?_LCD_Out+3,7,c
   372  001152  D00C               	goto	l131
   373                           ;lcd_portd.c: 91: LCD_Write('-');
   374  001154  0E2D               	movlw	45
   375  001156  EC2B  F00A         	call	_LCD_Write
   376                           ;lcd_portd.c: 92: DATA = -DATA;
   377  00115A  1E0E               	comf	?_LCD_Out+3,f,c
   378  00115C  1E0D               	comf	?_LCD_Out+2,f,c
   379  00115E  1E0C               	comf	?_LCD_Out+1,f,c
   380  001160  6C0B               	negf	?_LCD_Out,c
   381  001162  0E00               	movlw	0
   382  001164  220C               	addwfc	?_LCD_Out+1,f,c
   383  001166  220D               	addwfc	?_LCD_Out+2,f,c
   384  001168  220E               	addwfc	?_LCD_Out+3,f,c
   385                           ;lcd_portd.c: 93: }
   386  00116A  D003               	goto	l132
   387  00116C                     l131:
   388                           ; BSR set to: ?
   389                           ;lcd_portd.c: 94: else LCD_Write(' ');
   390  00116C  0E20               	movlw	32
   391  00116E  EC2B  F00A         	call	_LCD_Write
   392  001172                     l132:
   393                           ; BSR set to: ?
   394                           ; LCD_Out@i allocated to fsr2l
   395                           ;lcd_portd.c: 95: for (i=0; i<10; i++) {
   396  001172  6AD9               	clrf	fsr2l,c
   397  001174                     l133:
   398                           ; BSR set to: ?
   399                           ;lcd_portd.c: 96: A[i] = DATA % 10;
   400  001174  0E0A               	movlw	10
   401  001176  6E20               	movwf	?___almod+4,c
   402  001178  0E00               	movlw	0
   403  00117A  6A21               	clrf	?___almod+5,c
   404  00117C  6A22               	clrf	?___almod+6,c
   405  00117E  6A23               	clrf	?___almod+7,c
   406  001180  C00B  F01C         	movff	?_LCD_Out,?___almod
   407  001184  C00C  F01D         	movff	?_LCD_Out+1,?___almod+1
   408  001188  C00D  F01E         	movff	?_LCD_Out+2,?___almod+2
   409  00118C  C00E  F01F         	movff	?_LCD_Out+3,?___almod+3
   410  001190  EC69  F009         	call	___almod	;wreg free
   411  001194  0E11               	movlw	low ??_LCD_Out
   412  001196  24D9               	addwf	fsr2l,w,c
   413  001198  6EE9               	movwf	fsr0l,c
   414  00119A  6AEA               	clrf	fsr0h,c
   415  00119C  0E00               	movlw	high ??_LCD_Out
   416  00119E  22EA               	addwfc	fsr0h,f,c
   417  0011A0  C01C  FFEF         	movff	?___almod,indf0
   418                           ;lcd_portd.c: 97: DATA = DATA / 10;
   419  0011A4  0E0A               	movlw	10
   420  0011A6  6E20               	movwf	?___aldiv+4,c
   421  0011A8  0E00               	movlw	0
   422  0011AA  6A21               	clrf	?___aldiv+5,c
   423  0011AC  6A22               	clrf	?___aldiv+6,c
   424  0011AE  6A23               	clrf	?___aldiv+7,c
   425  0011B0  C00B  F01C         	movff	?_LCD_Out,?___aldiv
   426  0011B4  C00C  F01D         	movff	?_LCD_Out+1,?___aldiv+1
   427  0011B8  C00D  F01E         	movff	?_LCD_Out+2,?___aldiv+2
   428  0011BC  C00E  F01F         	movff	?_LCD_Out+3,?___aldiv+3
   429  0011C0  EC0B  F009         	call	___aldiv	;wreg free
   430  0011C4  C01C  F00B         	movff	?___aldiv,?_LCD_Out
   431  0011C8  C01D  F00C         	movff	?___aldiv+1,?_LCD_Out+1
   432  0011CC  C01E  F00D         	movff	?___aldiv+2,?_LCD_Out+2
   433  0011D0  C01F  F00E         	movff	?___aldiv+3,?_LCD_Out+3
   434  0011D4  2AD9               	incf	fsr2l,f,c
   435  0011D6  0E09               	movlw	9
   436  0011D8  64D9               	cpfsgt	fsr2l,c
   437  0011DA  D7CC               	goto	l133
   438                           ; BSR set to: ?
   439                           ; LCD_Out@i allocated to prodh
   440                           ;lcd_portd.c: 98: }
   441                           ;lcd_portd.c: 99: for (i=D; i>0; i--) {
   442  0011DC  C00F  FFF4         	movff	?_LCD_Out+4,prodh
   443  0011E0  66F4               	tstfsz	prodh,c
   444  0011E2  D001               	goto	l136
   445  0011E4  0C09               	retlw	9
   446  0011E6                     l136:
   447                           ; BSR set to: ?
   448                           ;lcd_portd.c: 100: if (i == N) LCD_Write('.');
   449  0011E6  5010               	movf	?_LCD_Out+5,w,c
   450  0011E8  62F4               	cpfseq	prodh,c
   451  0011EA  D003               	goto	l139
   452  0011EC  0E2E               	movlw	46
   453  0011EE  EC2B  F00A         	call	_LCD_Write
   454  0011F2                     l139:
   455                           ; BSR set to: ?
   456                           ;lcd_portd.c: 101: LCD_Write(A[i-1] + '0');
   457  0011F2  CFF4 F01B          	movff	prodh,??_LCD_Out+10
   458  0011F6  0EFF               	movlw	-1
   459  0011F8  261B               	addwf	??_LCD_Out+10,f,c
   460  0011FA  0E11               	movlw	low ??_LCD_Out
   461  0011FC  241B               	addwf	??_LCD_Out+10,w,c
   462  0011FE  6EE9               	movwf	fsr0l,c
   463  001200  6AEA               	clrf	fsr0h,c
   464  001202  0E00               	movlw	high ??_LCD_Out
   465  001204  22EA               	addwfc	fsr0h,f,c
   466  001206  50EF               	movf	indf0,w,c
   467  001208  0F30               	addlw	48
   468  00120A  EC2B  F00A         	call	_LCD_Write
   469  00120E  06F4               	decf	prodh,f,c
   470  001210  66F4               	tstfsz	prodh,c
   471  001212  D7E9               	goto	l136
   472  001214  0012               	return	
   473                           ; BSR set to: ?
   474                           ;lcd_portd.c: 102: }
   475                           ;lcd_portd.c: 103: }
   476                           ; BSR set to: ?
   477  001216                     __end_of_LCD_Out:
   478                           	opt stack 0
   479                           
   480                           	psect	text3
   481                           ; =============== function _LCD_Out ends =======
      +                          =====
   482  000000                     
   483                           ;lcd_portd.c: 72: void LCD_Init(void)
   484                           ;lcd_portd.c: 73: {
   485  0013A0                     _LCD_Init:
   486                           	opt stack 30
   487                           ; BSR set to: ?
   488                           ;lcd_portd.c: 74: TRISD = 0x01;
   489  0013A0  0E01               	movlw	1
   490  0013A2  6E95               	movwf	3989,c	;volatile
   491                           ;lcd_portd.c: 75: RD1 = 0;
   492  0013A4  9283               	bcf	3971,1,c	;volatile
   493                           ;lcd_portd.c: 76: LCD_Inst(0x33);
   494  0013A6  0E33               	movlw	51
   495  0013A8  ECEA  F009         	call	_LCD_Inst
   496                           ;lcd_portd.c: 77: LCD_Inst(0x32);
   497  0013AC  0E32               	movlw	50
   498  0013AE  ECEA  F009         	call	_LCD_Inst
   499                           ;lcd_portd.c: 78: LCD_Inst(0x28);
   500  0013B2  0E28               	movlw	40
   501  0013B4  ECEA  F009         	call	_LCD_Inst
   502                           ;lcd_portd.c: 79: LCD_Inst(0x0E);
   503  0013B8  0E0E               	movlw	14
   504  0013BA  ECEA  F009         	call	_LCD_Inst
   505                           ;lcd_portd.c: 80: LCD_Inst(0x01);
   506  0013BE  0E01               	movlw	1
   507  0013C0  ECEA  F009         	call	_LCD_Inst
   508                           ;lcd_portd.c: 81: LCD_Inst(0x06);
   509  0013C4  0E06               	movlw	6
   510  0013C6  ECEA  F009         	call	_LCD_Inst
   511                           ;lcd_portd.c: 82: Wait_ms(100);
   512  0013CA  0E64               	movlw	100
   513  0013CC  6E0D               	movwf	?_Wait_ms,c
   514  0013CE  6A0E               	clrf	?_Wait_ms+1,c
   515  0013D0  EF17  F00A         	goto	_Wait_ms	;wreg free
   516                           ;lcd_portd.c: 83: }
   517                           ; BSR set to: ?
   518  0013D4                     __end_of_LCD_Init:
   519                           	opt stack 0
   520                           
   521                           	psect	text4
   522                           ; =============== function _LCD_Init ends ======
      +                          ======
   523  000000                     
   524                           ;Ohm_Meter.c: 16: unsigned int A2D_Read(unsigned
      +                           char c)
   525                           ;Ohm_Meter.c: 17: {
   526  001404                     _A2D_Read:
   527                           	opt stack 30
   528                           ; BSR set to: ?
   529                           ; A2D_Read@c loaded to fsr0l
   530  001404  CFE8 FFE9          	movff	wreg,fsr0l
   531  001408  0E0F               	movlw	15
   532  00140A  16E9               	andwf	fsr0l,f,c
   533                           ;Ohm_Meter.c: 21: ADCON0 = (c << 2) + 0x01;
   534  00140C  50E9               	movf	fsr0l,w,c
   535  00140E  0D04               	mullw	4
   536  001410  28F3               	incf	prodl,w,c
   537  001412  6EC2               	movwf	4034,c	;volatile
   538                           ;Ohm_Meter.c: 22: for (i=0; i<20; i++);
   539  001414  6AD9               	clrf	fsr2l,c
   540  001416                     l141:
   541                           ; BSR set to: ?
   542  001416  2AD9               	incf	fsr2l,f,c
   543  001418  0E13               	movlw	19
   544  00141A  64D9               	cpfsgt	fsr2l,c
   545  00141C  D7FC               	goto	l141
   546                           ; BSR set to: ?
   547                           ;Ohm_Meter.c: 23: GODONE = 1;
   548  00141E  82C2               	bsf	4034,1,c	;volatile
   549                           ;Ohm_Meter.c: 24: while(GODONE);
   550  001420                     l144:
   551                           ; BSR set to: ?
   552  001420  B2C2               	btfsc	4034,1,c	;volatile
   553  001422  D7FE               	goto	l144
   554                           ; BSR set to: ?
   555  001424  CFC3 F00B          	movff	4035,?_A2D_Read	;volatile
   556  001428  CFC4 F00C          	movff	4036,?_A2D_Read+1	;volatile
   557  00142C  0012               	return	
   558                           ;Ohm_Meter.c: 26: }
   559                           ; BSR set to: ?
   560  00142E                     __end_of_A2D_Read:
   561                           	opt stack 0
   562                           
   563                           	psect	text5
   564                           ; =============== function _A2D_Read ends ======
      +                          ======
   565  000000                     
   566                           ;lcd_portd.c: 61: void LCD_Write(unsigned char c
      +                          )
   567                           ;lcd_portd.c: 62: {
   568  001456                     _LCD_Write:
   569                           	opt stack 29
   570                           ; BSR set to: ?
   571                           ; LCD_Write@c loaded to prodl
   572  001456  CFE8 FFF3          	movff	wreg,prodl
   573                           ;lcd_portd.c: 63: RD2 = 1;
   574  00145A  8483               	bsf	3971,2,c	;volatile
   575                           ;lcd_portd.c: 64: PORTD = (PORTD & 0x0F) | (c & 
      +                          0xF0);
   576  00145C  CFF3 F01C          	movff	prodl,??_LCD_Write
   577  001460  0EF0               	movlw	240
   578  001462  EC44  F00A         	call	PL2
   579                           ;lcd_portd.c: 65: LCD_Strobe();
   580  001466  EC4A  F00A         	call	_LCD_Strobe	;wreg free
   581                           ;lcd_portd.c: 66: PORTD = (PORTD & 0x0F) | ((c<<
      +                          4) & 0xF0);
   582  00146A  CFF3 F01C          	movff	prodl,??_LCD_Write
   583  00146E  3A1C               	swapf	??_LCD_Write,f,c
   584  001470  0EF0               	movlw	240
   585  001472  161C               	andwf	??_LCD_Write,f,c
   586  001474  EC44  F00A         	call	PL2
   587                           ;lcd_portd.c: 67: LCD_Strobe();
   588  001478  EF4A  F00A         	goto	_LCD_Strobe	;wreg free
   589                           ;lcd_portd.c: 69: }
   590                           ; BSR set to: ?
   591  00147C                     __end_of_LCD_Write:
   592                           	opt stack 0
   593                           
   594                           	psect	text6
   595                           ; =============== function _LCD_Write ends =====
      +                          =======
   596  000000                     
   597                           ;lcd_portd.c: 43: void LCD_Inst(unsigned char c)
   598                           ;lcd_portd.c: 44: {
   599  0013D4                     _LCD_Inst:
   600                           	opt stack 29
   601                           ; BSR set to: ?
   602                           ; LCD_Inst@c loaded to prodl
   603  0013D4  CFE8 FFF3          	movff	wreg,prodl
   604  0013D8  9483               	bcf	3971,2,c	;volatile
   605                           ;lcd_portd.c: 46: PORTD = (PORTD & 0x0F) | (c & 
      +                          0xF0);
   606  0013DA  CFF3 F00C          	movff	prodl,??_LCD_Inst
   607  0013DE  0EF0               	movlw	240
   608  0013E0  EC3E  F00A         	call	PL3
   609                           ;lcd_portd.c: 47: LCD_Strobe();
   610  0013E4  EC4A  F00A         	call	_LCD_Strobe	;wreg free
   611                           ;lcd_portd.c: 48: PORTD = (PORTD & 0x0F) | ((c<<
      +                          4) & 0xF0);
   612  0013E8  CFF3 F00C          	movff	prodl,??_LCD_Inst
   613  0013EC  3A0C               	swapf	??_LCD_Inst,f,c
   614  0013EE  0EF0               	movlw	240
   615  0013F0  160C               	andwf	??_LCD_Inst,f,c
   616  0013F2  EC3E  F00A         	call	PL3
   617                           ;lcd_portd.c: 49: LCD_Strobe();
   618  0013F6  EC4A  F00A         	call	_LCD_Strobe	;wreg free
   619                           ;lcd_portd.c: 50: Wait_ms(10);
   620  0013FA  0E0A               	movlw	10
   621  0013FC  6E0D               	movwf	?_Wait_ms,c
   622  0013FE  6A0E               	clrf	?_Wait_ms+1,c
   623  001400  EF17  F00A         	goto	_Wait_ms	;wreg free
   624                           ;lcd_portd.c: 51: }
   625                           ; BSR set to: ?
   626  001404                     __end_of_LCD_Inst:
   627                           	opt stack 0
   628                           
   629                           	psect	text7
   630                           ; =============== function _LCD_Inst ends ======
      +                          ======
   631  000000                     
   632  001216                     ___aldiv:
   633                           	opt stack 29
   634                           ; BSR set to: ?
   635  001216  6AF3               	clrf	prodl,c
   636  001218  AE23               	btfss	?___aldiv+7,7,c
   637  00121A  D00A               	goto	l179
   638  00121C  1E23               	comf	?___aldiv+7,f,c
   639  00121E  1E22               	comf	?___aldiv+6,f,c
   640  001220  1E21               	comf	?___aldiv+5,f,c
   641  001222  6C20               	negf	?___aldiv+4,c
   642  001224  0E00               	movlw	0
   643  001226  2221               	addwfc	?___aldiv+5,f,c
   644  001228  2222               	addwfc	?___aldiv+6,f,c
   645  00122A  2223               	addwfc	?___aldiv+7,f,c
   646  00122C  0E01               	movlw	1
   647  00122E  6EF3               	movwf	prodl,c
   648  001230                     l179:
   649                           ; BSR set to: ?
   650  001230  AE1F               	btfss	?___aldiv+3,7,c
   651  001232  D00A               	goto	l180
   652  001234  1E1F               	comf	?___aldiv+3,f,c
   653  001236  1E1E               	comf	?___aldiv+2,f,c
   654  001238  1E1D               	comf	?___aldiv+1,f,c
   655  00123A  6C1C               	negf	?___aldiv,c
   656  00123C  0E00               	movlw	0
   657  00123E  221D               	addwfc	?___aldiv+1,f,c
   658  001240  221E               	addwfc	?___aldiv+2,f,c
   659  001242  221F               	addwfc	?___aldiv+3,f,c
   660  001244  0E01               	movlw	1
   661  001246  1AF3               	xorwf	prodl,f,c
   662  001248                     l180:
   663                           ; BSR set to: ?
   664  001248  6A24               	clrf	??___aldiv,c
   665  00124A  6A25               	clrf	??___aldiv+1,c
   666  00124C  6A26               	clrf	??___aldiv+2,c
   667  00124E  6A27               	clrf	??___aldiv+3,c
   668  001250  5023               	movf	?___aldiv+7,w,c
   669  001252  1020               	iorwf	?___aldiv+4,w,c
   670  001254  1021               	iorwf	?___aldiv+5,w,c
   671  001256  1022               	iorwf	?___aldiv+6,w,c
   672  001258  E029               	bz	l181
   673  00125A  0E01               	movlw	1
   674  00125C  6EE9               	movwf	fsr0l,c
   675  00125E                     l182:
   676                           ; BSR set to: ?
   677  00125E  90D8               	bcf	status,0,c
   678                           ; BSR set to: ?
   679  001260  BE23               	btfsc	?___aldiv+7,7,c
   680  001262  D007               	goto	L1
   681  001264  3620               	rlcf	?___aldiv+4,f,c
   682  001266  3621               	rlcf	?___aldiv+5,f,c
   683  001268  3622               	rlcf	?___aldiv+6,f,c
   684  00126A  3623               	rlcf	?___aldiv+7,f,c
   685  00126C  2AE9               	incf	fsr0l,f,c
   686  00126E  D7F7               	goto	l182
   687                           ; BSR set to: ?
   688  001270                     l187:
   689                           ; BSR set to: ?
   690  001270  90D8               	bcf	status,0,c
   691  001272                     L1:
   692  001272  3624               	rlcf	??___aldiv,f,c
   693  001274  3625               	rlcf	??___aldiv+1,f,c
   694  001276  3626               	rlcf	??___aldiv+2,f,c
   695  001278  3627               	rlcf	??___aldiv+3,f,c
   696  00127A  5020               	movf	?___aldiv+4,w,c
   697  00127C  5C1C               	subwf	?___aldiv,w,c
   698  00127E  5021               	movf	?___aldiv+5,w,c
   699  001280  581D               	subwfb	?___aldiv+1,w,c
   700  001282  5022               	movf	?___aldiv+6,w,c
   701  001284  581E               	subwfb	?___aldiv+2,w,c
   702  001286  5023               	movf	?___aldiv+7,w,c
   703  001288  581F               	subwfb	?___aldiv+3,w,c
   704  00128A  E309               	bnc	l188
   705  00128C  5020               	movf	?___aldiv+4,w,c
   706  00128E  5E1C               	subwf	?___aldiv,f,c
   707  001290  5021               	movf	?___aldiv+5,w,c
   708  001292  5A1D               	subwfb	?___aldiv+1,f,c
   709  001294  5022               	movf	?___aldiv+6,w,c
   710  001296  5A1E               	subwfb	?___aldiv+2,f,c
   711  001298  5023               	movf	?___aldiv+7,w,c
   712  00129A  5A1F               	subwfb	?___aldiv+3,f,c
   713  00129C  8024               	bsf	??___aldiv,0,c
   714  00129E                     l188:
   715                           ; BSR set to: ?
   716  00129E  90D8               	bcf	status,0,c
   717  0012A0  3223               	rrcf	?___aldiv+7,f,c
   718  0012A2  3222               	rrcf	?___aldiv+6,f,c
   719  0012A4  3221               	rrcf	?___aldiv+5,f,c
   720  0012A6  3220               	rrcf	?___aldiv+4,f,c
   721  0012A8  2EE9               	decfsz	fsr0l,f,c
   722  0012AA  D7E2               	goto	l187
   723                           ; BSR set to: ?
   724  0012AC                     l181:
   725                           ; BSR set to: ?
   726  0012AC  50F3               	movf	prodl,w,c
   727  0012AE  E008               	bz	l189
   728  0012B0  1E27               	comf	??___aldiv+3,f,c
   729  0012B2  1E26               	comf	??___aldiv+2,f,c
   730  0012B4  1E25               	comf	??___aldiv+1,f,c
   731  0012B6  6C24               	negf	??___aldiv,c
   732  0012B8  0E00               	movlw	0
   733  0012BA  2225               	addwfc	??___aldiv+1,f,c
   734  0012BC  2226               	addwfc	??___aldiv+2,f,c
   735  0012BE  2227               	addwfc	??___aldiv+3,f,c
   736  0012C0                     l189:
   737                           ; BSR set to: ?
   738  0012C0  C024  F01C         	movff	??___aldiv,?___aldiv
   739  0012C4  C025  F01D         	movff	??___aldiv+1,?___aldiv+1
   740  0012C8  C026  F01E         	movff	??___aldiv+2,?___aldiv+2
   741  0012CC  C027  F01F         	movff	??___aldiv+3,?___aldiv+3
   742  0012D0  0012               	return	
   743                           ; BSR set to: ?
   744  0012D2                     __end_of___aldiv:
   745                           	opt stack 0
   746                           
   747                           	psect	text8
   748                           ; =============== function ___aldiv ends =======
      +                          =====
   749  000000                     
   750  0012D2                     ___almod:
   751                           	opt stack 29
   752                           ; BSR set to: ?
   753  0012D2  6AF3               	clrf	prodl,c
   754  0012D4  AE1F               	btfss	?___almod+3,7,c
   755  0012D6  D00A               	goto	l191
   756  0012D8  1E1F               	comf	?___almod+3,f,c
   757  0012DA  1E1E               	comf	?___almod+2,f,c
   758  0012DC  1E1D               	comf	?___almod+1,f,c
   759  0012DE  6C1C               	negf	?___almod,c
   760  0012E0  0E00               	movlw	0
   761  0012E2  221D               	addwfc	?___almod+1,f,c
   762  0012E4  221E               	addwfc	?___almod+2,f,c
   763  0012E6  221F               	addwfc	?___almod+3,f,c
   764  0012E8  0E01               	movlw	1
   765  0012EA  6EF3               	movwf	prodl,c
   766  0012EC                     l191:
   767                           ; BSR set to: ?
   768  0012EC  AE23               	btfss	?___almod+7,7,c
   769  0012EE  D008               	goto	l192
   770  0012F0  1E23               	comf	?___almod+7,f,c
   771  0012F2  1E22               	comf	?___almod+6,f,c
   772  0012F4  1E21               	comf	?___almod+5,f,c
   773  0012F6  6C20               	negf	?___almod+4,c
   774  0012F8  0E00               	movlw	0
   775  0012FA  2221               	addwfc	?___almod+5,f,c
   776  0012FC  2222               	addwfc	?___almod+6,f,c
   777  0012FE  2223               	addwfc	?___almod+7,f,c
   778  001300                     l192:
   779                           ; BSR set to: ?
   780  001300  5023               	movf	?___almod+7,w,c
   781  001302  1020               	iorwf	?___almod+4,w,c
   782  001304  1021               	iorwf	?___almod+5,w,c
   783  001306  1022               	iorwf	?___almod+6,w,c
   784  001308  E023               	bz	l193
   785  00130A  0E01               	movlw	1
   786  00130C  6EE9               	movwf	fsr0l,c
   787  00130E                     l194:
   788                           ; BSR set to: ?
   789  00130E  BE23               	btfsc	?___almod+7,7,c
   790  001310  D007               	goto	l199
   791                           ; BSR set to: ?
   792  001312  90D8               	bcf	status,0,c
   793  001314  3620               	rlcf	?___almod+4,f,c
   794  001316  3621               	rlcf	?___almod+5,f,c
   795  001318  3622               	rlcf	?___almod+6,f,c
   796  00131A  3623               	rlcf	?___almod+7,f,c
   797  00131C  2AE9               	incf	fsr0l,f,c
   798  00131E  D7F7               	goto	l194
   799                           ; BSR set to: ?
   800  001320                     l199:
   801                           ; BSR set to: ?
   802  001320  5020               	movf	?___almod+4,w,c
   803  001322  5C1C               	subwf	?___almod,w,c
   804  001324  5021               	movf	?___almod+5,w,c
   805  001326  581D               	subwfb	?___almod+1,w,c
   806  001328  5022               	movf	?___almod+6,w,c
   807  00132A  581E               	subwfb	?___almod+2,w,c
   808  00132C  5023               	movf	?___almod+7,w,c
   809  00132E  581F               	subwfb	?___almod+3,w,c
   810  001330  E308               	bnc	l200
   811  001332  5020               	movf	?___almod+4,w,c
   812  001334  5E1C               	subwf	?___almod,f,c
   813  001336  5021               	movf	?___almod+5,w,c
   814  001338  5A1D               	subwfb	?___almod+1,f,c
   815  00133A  5022               	movf	?___almod+6,w,c
   816  00133C  5A1E               	subwfb	?___almod+2,f,c
   817  00133E  5023               	movf	?___almod+7,w,c
   818  001340  5A1F               	subwfb	?___almod+3,f,c
   819  001342                     l200:
   820                           ; BSR set to: ?
   821  001342  90D8               	bcf	status,0,c
   822  001344  3223               	rrcf	?___almod+7,f,c
   823  001346  3222               	rrcf	?___almod+6,f,c
   824  001348  3221               	rrcf	?___almod+5,f,c
   825  00134A  3220               	rrcf	?___almod+4,f,c
   826  00134C  2EE9               	decfsz	fsr0l,f,c
   827  00134E  D7E8               	goto	l199
   828                           ; BSR set to: ?
   829  001350                     l193:
   830                           ; BSR set to: ?
   831  001350  50F3               	movf	prodl,w,c
   832  001352  E008               	bz	l201
   833  001354  1E1F               	comf	?___almod+3,f,c
   834  001356  1E1E               	comf	?___almod+2,f,c
   835  001358  1E1D               	comf	?___almod+1,f,c
   836  00135A  6C1C               	negf	?___almod,c
   837  00135C  0E00               	movlw	0
   838  00135E  221D               	addwfc	?___almod+1,f,c
   839  001360  221E               	addwfc	?___almod+2,f,c
   840  001362  221F               	addwfc	?___almod+3,f,c
   841  001364                     l201:
   842                           ; BSR set to: ?
   843  001364  0012               	return	
   844                           ; BSR set to: ?
   845  001366                     __end_of___almod:
   846                           	opt stack 0
   847                           
   848                           	psect	text9
   849                           ; =============== function ___almod ends =======
      +                          =====
   850  000000                     
   851                           ;lcd_portd.c: 31: void LCD_Strobe(void)
   852                           ;lcd_portd.c: 32: {
   853  001494                     _LCD_Strobe:
   854                           	opt stack 28
   855                           ; BSR set to: ?
   856                           ;lcd_portd.c: 33: RD3 = 0;
   857  001494  9683               	bcf	3971,3,c	;volatile
   858                           ;lcd_portd.c: 34: LCD_Pause();
   859  001496  EC53  F00A         	call	_LCD_Pause	;wreg free
   860                           ;lcd_portd.c: 35: RD3 = 1;
   861  00149A  8683               	bsf	3971,3,c	;volatile
   862                           ;lcd_portd.c: 36: LCD_Pause();
   863  00149C  EC53  F00A         	call	_LCD_Pause	;wreg free
   864                           ;lcd_portd.c: 37: RD3 = 0;
   865  0014A0  9683               	bcf	3971,3,c	;volatile
   866                           ;lcd_portd.c: 38: LCD_Pause();
   867  0014A2  EF53  F00A         	goto	_LCD_Pause	;wreg free
   868                           ;lcd_portd.c: 39: }
   869                           ; BSR set to: ?
   870  0014A6                     __end_of_LCD_Strobe:
   871                           	opt stack 0
   872                           
   873                           	psect	text10
   874                           ; =============== function _LCD_Strobe ends ====
      +                          ========
   875  000000                     
   876                           ;lcd_portd.c: 15: void Wait_ms(unsigned int X)
   877                           ;lcd_portd.c: 16: {
   878  00142E                     _Wait_ms:
   879                           	opt stack 28
   880                           ; BSR set to: ?
   881                           ;lcd_portd.c: 17: unsigned int i, j;
   882                           ;lcd_portd.c: 19: for (i=0; i<X; i++)
   883  00142E  6AF3               	clrf	prodl,c
   884  001430  6AF4               	clrf	prodh,c
   885  001432                     l113:
   886                           ; BSR set to: ?
   887  001432  500D               	movf	?_Wait_ms,w,c
   888  001434  5CF3               	subwf	prodl,w,c
   889  001436  500E               	movf	?_Wait_ms+1,w,c
   890  001438  58F4               	subwfb	prodh,w,c
   891  00143A  B0D8               	btfsc	status,0,c
   892  00143C  0012               	return	
   893                           ; BSR set to: ?
   894                           ;lcd_portd.c: 20: for (j=0; j<617; j++);
   895  00143E  6A0F               	clrf	??_Wait_ms,c
   896  001440  6A10               	clrf	??_Wait_ms+1,c
   897  001442                     l114:
   898                           ; BSR set to: ?
   899  001442  4A0F               	infsnz	??_Wait_ms,f,c
   900  001444  2A10               	incf	??_Wait_ms+1,f,c
   901  001446  0E69               	movlw	105
   902  001448  5C0F               	subwf	??_Wait_ms,w,c
   903  00144A  0E02               	movlw	2
   904  00144C  5810               	subwfb	??_Wait_ms+1,w,c
   905  00144E  E3F9               	bnc	l114
   906                           ; BSR set to: ?
   907  001450  4AF3               	infsnz	prodl,f,c
   908  001452  2AF4               	incf	prodh,f,c
   909  001454  D7EE               	goto	l113
   910                           ; BSR set to: ?
   911                           ;lcd_portd.c: 21: }
   912                           ; BSR set to: ?
   913  001456                     __end_of_Wait_ms:
   914                           	opt stack 0
   915                           
   916                           	psect	text11
   917                           ; =============== function _Wait_ms ends =======
      +                          =====
   918  000000                     
   919                           ;lcd_portd.c: 24: void LCD_Pause(void)
   920                           ;lcd_portd.c: 25: {
   921  0014A6                     _LCD_Pause:
   922                           	opt stack 27
   923                           ; BSR set to: ?
   924  0014A6  6AE9               	clrf	fsr0l,c
   925  0014A8                     l118:
   926                           ; BSR set to: ?
   927  0014A8  2AE9               	incf	fsr0l,f,c
   928  0014AA  0E13               	movlw	19
   929  0014AC  64E9               	cpfsgt	fsr0l,c
   930  0014AE  D7FC               	goto	l118
   931  0014B0  0C13               	retlw	19
   932                           ; BSR set to: ?
   933                           ;lcd_portd.c: 28: }
   934                           ; BSR set to: ?
   935  0014B2                     __end_of_LCD_Pause:
   936                           	opt stack 0
   937                           
   938                           	psect	smallconst
   939                           ; =============== function _LCD_Pause ends =====
      +                          =======
   940  001000  00                 	db	0	;reserve
   941  001001                     _MSG0:
   942                           	opt stack 0
   943  001001  4F                 	db	79
   944  001002  68                 	db	104
   945  001003  6D                 	db	109
   946  001004  5F                 	db	95
   947  001005  4D                 	db	77
   948  001006  65                 	db	101
   949  001007  74                 	db	116
   950  001008  65                 	db	101
   951  001009  72                 	db	114
   952  00100A  2E                 	db	46
   953  00100B  43                 	db	67
   954  00100C  20                 	db	32
   955  00100D  20                 	db	32
   956  00100E  20                 	db	32
   957  00100F  20                 	db	32
   958  001010  20                 	db	32
   959  001011  20                 	db	32
   960  001012  20                 	db	32
   961  001013  20                 	db	32
   962  001014  00                 	db	0
   963  001015  00                 	db	0
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  001016  00                 	db	0	; dummy byte at the end
   979                           
   980                           	psect	rparam
   981  000000                     
   982  000000                     
   983                           
   984                           	psect	pa_nodes
   985  00147C                     PL3:
   986  00147C  160C               	andwf	??_LCD_Inst,f,c
   987  00147E  5083               	movf	3971,w,c	;volatile
   988  001480  0B0F               	andlw	15
   989  001482  100C               	iorwf	??_LCD_Inst,w,c
   990  001484  6E83               	movwf	3971,c	;volatile
   991  001486  0012               	return	
   992  001488                     PL2:
   993  001488  161C               	andwf	??_LCD_Write,f,c
   994  00148A  5083               	movf	3971,w,c	;volatile
   995  00148C  0B0F               	andlw	15
   996  00148E  101C               	iorwf	??_LCD_Write,w,c
   997  001490  6E83               	movwf	3971,c	;volatile
   998  001492  0012               	return	
   999                           tblptru	equ	0xFF8
  1000                           tblptrh	equ	0xFF7
  1001                           tblptrl	equ	0xFF6
  1002                           tablat	equ	0xFF5
  1003                           prodh	equ	0xFF4
  1004                           prodl	equ	0xFF3
  1005                           indf0	equ	0xFEF
  1006                           fsr0h	equ	0xFEA
  1007                           fsr0l	equ	0xFE9
  1008                           wreg	equ	0xFE8
  1009                           fsr2l	equ	0xFD9
  1010                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.63PL3 build 4692 
Symbol Table                                           Thu Feb 27 14:27:51 2020

        ?_LCD_Strobe 001D                  l200 1342  
                l113 1432                  l201 1364  
                l114 1442                  l131 116C  
                l132 1172                  l124 1376  
                l141 1416                  l133 1174  
                l125 1382                  l118 14A8  
                l126 1390                  l144 1420  
                l136 11E6                  l152 1088  
                l139 11F2                  l180 1248  
                l148 1038                  l181 12AC  
                l182 125E                  l191 12EC  
                l192 1300                  l193 1350  
                l194 130E                  l187 1270  
                l179 1230                  l188 129E  
                l189 12C0                  l199 1320  
                _RD1 007C19                  _RD2 007C1A  
                _RD3 007C1B                  wreg 000FE8  
   __end_of_A2D_Read 142E      __end_of_LCD_Out 1216  
               _MSG0 1001                 _main 1018  
               indf0 000FEF                 fsr0l 000FE9  
               fsr2l 000FD9                 prodh 000FF4  
               prodl 000FF3                 start 0000  
        LCD_Out@DATA 000B          LCD_Move@Col 000B  
   __end_of_LCD_Init 13D4     __end_of_LCD_Inst 1404  
   __end_of_LCD_Move 13A0      __end_of_Wait_ms 1456  
    __end_of___aldiv 12D2      __end_of___almod 1366  
              ?_main 0000                _ADRES 000FC3  
              _PORTD 000F83                _TRISA 000F92  
              _TRISB 000F93                _TRISC 000F94  
              _TRISD 000F95                _TRISE 000F96  
              main@i 0008                tablat 000FF5  
              status 000FD8         __end_of_main 1150  
             ??_main 0000        __activetblptr 000003  
  __end_of_LCD_Pause 14B2            ??_LCD_Out 0011  
  __end_of_LCD_Write 147C               _ADCON0 000FC2  
             _ADCON1 000FC1               _ADCON2 000FC0  
             _GODONE 007E11               __Ldata 000000  
          ??_Wait_ms 000F            ??___aldiv 0024  
          ??___almod 0024            ?_A2D_Read 000B  
       __mediumconst 1018               tblptrh 000FF7  
             tblptrl 000FF6               tblptru 000FF8  
         __accesstop 0080            ?_LCD_Init 000B  
          ?_LCD_Inst 000C            ?_LCD_Move 000B  
         ??_A2D_Read 000D         ??_LCD_Strobe 001D  
         ??_LCD_Init 000B           ??_LCD_Inst 000C  
         ??_LCD_Move 000C   __end_of_LCD_Strobe 14A6  
            _LCD_Out 1150              __Hparam 0028  
            __Lparam 0000              _Wait_ms 142E  
            ___aldiv 1216              ___almod 12D2  
            __ramtop 1000     ___aldiv@dividend 001C  
            main@A2D 0006              main@OHM 0002  
          _LCD_Pause 14A6            _LCD_Write 1456  
      __Lmediumconst 1018     ___aldiv@quotient 0024  
         ?_LCD_Pause 001D           ?_LCD_Write 001C  
           ?_LCD_Out 000B             LCD_Out@A 0011  
           LCD_Out@D 000F             LCD_Out@N 0010  
        ??_LCD_Pause 001D          ??_LCD_Write 001C  
           ?_Wait_ms 000D             ?___aldiv 001C  
           ?___almod 001C             _A2D_Read 1404  
   ___almod@dividend 001C          __smallconst 1000  
    ___aldiv@divisor 0020             _LCD_Init 13A0  
           _LCD_Inst 13D4             _LCD_Move 1366  
           __Hrparam 0028             Wait_ms@X 000D  
           Wait_ms@j 000F             __Lrparam 0000  
       __Lsmallconst 1000      ___almod@divisor 0020  
           main@VOLT 0004           _LCD_Strobe 1494  
        main@CELSIUS 0000  
